# Generated from Decaf.g4 by ANTLR 4.9.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2/")
        buf.write("\u0117\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\3\2\3\2\3\2\3\2\3\2\3\2\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7")
        buf.write("\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\n\3\n\3\n\3\n\3")
        buf.write("\13\3\13\3\13\3\13\3\13\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3")
        buf.write("\f\3\r\3\r\3\r\3\r\3\r\3\16\3\16\3\17\3\17\3\20\3\20\3")
        buf.write("\21\3\21\3\21\3\22\3\22\3\22\3\22\3\22\3\23\3\23\3\23")
        buf.write("\3\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\25")
        buf.write("\3\25\3\26\3\26\3\27\3\27\3\30\3\30\3\31\3\31\3\32\3\32")
        buf.write("\3\33\3\33\3\34\3\34\3\35\3\35\3\36\3\36\3\36\3\37\3\37")
        buf.write("\3\37\3 \3 \3 \3!\3!\3!\3\"\3\"\3\"\3#\3#\3$\3$\3$\3%")
        buf.write("\3%\3%\3&\3&\3&\3\'\3\'\3(\3(\3(\3(\3(\3)\3)\3)\3)\3)")
        buf.write("\3)\3*\3*\3+\3+\3,\3,\3,\7,\u00f2\n,\f,\16,\u00f5\13,")
        buf.write("\3-\3-\7-\u00f9\n-\f-\16-\u00fc\13-\3.\3.\3.\3.\5.\u0102")
        buf.write("\n.\3.\3.\3/\6/\u0107\n/\r/\16/\u0108\3/\3/\3\60\3\60")
        buf.write("\3\60\3\60\7\60\u0111\n\60\f\60\16\60\u0114\13\60\3\60")
        buf.write("\3\60\2\2\61\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13")
        buf.write("\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26")
        buf.write("+\27-\30/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#")
        buf.write("E$G%I&K\'M(O)Q*S\2U\2W+Y,[-]._/\3\2\7\5\2C\\aac|\6\2\f")
        buf.write("\f\17\17))^^\4\2))^^\5\2\13\f\16\17\"\"\4\2\f\f\17\17")
        buf.write("\2\u011a\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2")
        buf.write("\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2")
        buf.write("\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2")
        buf.write("\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3")
        buf.write("\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2")
        buf.write("-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3")
        buf.write("\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2")
        buf.write("?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2")
        buf.write("\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2")
        buf.write("\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2")
        buf.write("\2\2\3a\3\2\2\2\5g\3\2\2\2\7o\3\2\2\2\tq\3\2\2\2\13s\3")
        buf.write("\2\2\2\ru\3\2\2\2\17w\3\2\2\2\21y\3\2\2\2\23\u0080\3\2")
        buf.write("\2\2\25\u0084\3\2\2\2\27\u0089\3\2\2\2\31\u0091\3\2\2")
        buf.write("\2\33\u0096\3\2\2\2\35\u0098\3\2\2\2\37\u009a\3\2\2\2")
        buf.write("!\u009c\3\2\2\2#\u009f\3\2\2\2%\u00a4\3\2\2\2\'\u00aa")
        buf.write("\3\2\2\2)\u00b1\3\2\2\2+\u00b3\3\2\2\2-\u00b5\3\2\2\2")
        buf.write("/\u00b7\3\2\2\2\61\u00b9\3\2\2\2\63\u00bb\3\2\2\2\65\u00bd")
        buf.write("\3\2\2\2\67\u00bf\3\2\2\29\u00c1\3\2\2\2;\u00c3\3\2\2")
        buf.write("\2=\u00c6\3\2\2\2?\u00c9\3\2\2\2A\u00cc\3\2\2\2C\u00cf")
        buf.write("\3\2\2\2E\u00d2\3\2\2\2G\u00d4\3\2\2\2I\u00d7\3\2\2\2")
        buf.write("K\u00da\3\2\2\2M\u00dd\3\2\2\2O\u00df\3\2\2\2Q\u00e4\3")
        buf.write("\2\2\2S\u00ea\3\2\2\2U\u00ec\3\2\2\2W\u00ee\3\2\2\2Y\u00f6")
        buf.write("\3\2\2\2[\u00fd\3\2\2\2]\u0106\3\2\2\2_\u010c\3\2\2\2")
        buf.write("ab\7e\2\2bc\7n\2\2cd\7c\2\2de\7u\2\2ef\7u\2\2f\4\3\2\2")
        buf.write("\2gh\7R\2\2hi\7t\2\2ij\7q\2\2jk\7i\2\2kl\7t\2\2lm\7c\2")
        buf.write("\2mn\7o\2\2n\6\3\2\2\2op\7}\2\2p\b\3\2\2\2qr\7\177\2\2")
        buf.write("r\n\3\2\2\2st\7=\2\2t\f\3\2\2\2uv\7]\2\2v\16\3\2\2\2w")
        buf.write("x\7_\2\2x\20\3\2\2\2yz\7u\2\2z{\7v\2\2{|\7t\2\2|}\7w\2")
        buf.write("\2}~\7e\2\2~\177\7v\2\2\177\22\3\2\2\2\u0080\u0081\7k")
        buf.write("\2\2\u0081\u0082\7p\2\2\u0082\u0083\7v\2\2\u0083\24\3")
        buf.write("\2\2\2\u0084\u0085\7e\2\2\u0085\u0086\7j\2\2\u0086\u0087")
        buf.write("\7c\2\2\u0087\u0088\7t\2\2\u0088\26\3\2\2\2\u0089\u008a")
        buf.write("\7d\2\2\u008a\u008b\7q\2\2\u008b\u008c\7q\2\2\u008c\u008d")
        buf.write("\7n\2\2\u008d\u008e\7g\2\2\u008e\u008f\7c\2\2\u008f\u0090")
        buf.write("\7p\2\2\u0090\30\3\2\2\2\u0091\u0092\7x\2\2\u0092\u0093")
        buf.write("\7q\2\2\u0093\u0094\7k\2\2\u0094\u0095\7f\2\2\u0095\32")
        buf.write("\3\2\2\2\u0096\u0097\7*\2\2\u0097\34\3\2\2\2\u0098\u0099")
        buf.write("\7.\2\2\u0099\36\3\2\2\2\u009a\u009b\7+\2\2\u009b \3\2")
        buf.write("\2\2\u009c\u009d\7k\2\2\u009d\u009e\7h\2\2\u009e\"\3\2")
        buf.write("\2\2\u009f\u00a0\7g\2\2\u00a0\u00a1\7n\2\2\u00a1\u00a2")
        buf.write("\7u\2\2\u00a2\u00a3\7g\2\2\u00a3$\3\2\2\2\u00a4\u00a5")
        buf.write("\7y\2\2\u00a5\u00a6\7j\2\2\u00a6\u00a7\7k\2\2\u00a7\u00a8")
        buf.write("\7n\2\2\u00a8\u00a9\7g\2\2\u00a9&\3\2\2\2\u00aa\u00ab")
        buf.write("\7t\2\2\u00ab\u00ac\7g\2\2\u00ac\u00ad\7v\2\2\u00ad\u00ae")
        buf.write("\7w\2\2\u00ae\u00af\7t\2\2\u00af\u00b0\7p\2\2\u00b0(\3")
        buf.write("\2\2\2\u00b1\u00b2\7?\2\2\u00b2*\3\2\2\2\u00b3\u00b4\7")
        buf.write("\60\2\2\u00b4,\3\2\2\2\u00b5\u00b6\7,\2\2\u00b6.\3\2\2")
        buf.write("\2\u00b7\u00b8\7\61\2\2\u00b8\60\3\2\2\2\u00b9\u00ba\7")
        buf.write("\'\2\2\u00ba\62\3\2\2\2\u00bb\u00bc\7-\2\2\u00bc\64\3")
        buf.write("\2\2\2\u00bd\u00be\7/\2\2\u00be\66\3\2\2\2\u00bf\u00c0")
        buf.write("\7>\2\2\u00c08\3\2\2\2\u00c1\u00c2\7@\2\2\u00c2:\3\2\2")
        buf.write("\2\u00c3\u00c4\7>\2\2\u00c4\u00c5\7?\2\2\u00c5<\3\2\2")
        buf.write("\2\u00c6\u00c7\7@\2\2\u00c7\u00c8\7?\2\2\u00c8>\3\2\2")
        buf.write("\2\u00c9\u00ca\7#\2\2\u00ca\u00cb\7?\2\2\u00cb@\3\2\2")
        buf.write("\2\u00cc\u00cd\7(\2\2\u00cd\u00ce\7(\2\2\u00ceB\3\2\2")
        buf.write("\2\u00cf\u00d0\7~\2\2\u00d0\u00d1\7~\2\2\u00d1D\3\2\2")
        buf.write("\2\u00d2\u00d3\7#\2\2\u00d3F\3\2\2\2\u00d4\u00d5\7?\2")
        buf.write("\2\u00d5\u00d6\7?\2\2\u00d6H\3\2\2\2\u00d7\u00d8\7>\2")
        buf.write("\2\u00d8\u00d9\7>\2\2\u00d9J\3\2\2\2\u00da\u00db\7@\2")
        buf.write("\2\u00db\u00dc\7@\2\2\u00dcL\3\2\2\2\u00dd\u00de\7)\2")
        buf.write("\2\u00deN\3\2\2\2\u00df\u00e0\7v\2\2\u00e0\u00e1\7t\2")
        buf.write("\2\u00e1\u00e2\7w\2\2\u00e2\u00e3\7g\2\2\u00e3P\3\2\2")
        buf.write("\2\u00e4\u00e5\7h\2\2\u00e5\u00e6\7c\2\2\u00e6\u00e7\7")
        buf.write("n\2\2\u00e7\u00e8\7u\2\2\u00e8\u00e9\7g\2\2\u00e9R\3\2")
        buf.write("\2\2\u00ea\u00eb\t\2\2\2\u00ebT\3\2\2\2\u00ec\u00ed\4")
        buf.write("\62;\2\u00edV\3\2\2\2\u00ee\u00f3\5S*\2\u00ef\u00f2\5")
        buf.write("S*\2\u00f0\u00f2\5U+\2\u00f1\u00ef\3\2\2\2\u00f1\u00f0")
        buf.write("\3\2\2\2\u00f2\u00f5\3\2\2\2\u00f3\u00f1\3\2\2\2\u00f3")
        buf.write("\u00f4\3\2\2\2\u00f4X\3\2\2\2\u00f5\u00f3\3\2\2\2\u00f6")
        buf.write("\u00fa\5U+\2\u00f7\u00f9\5U+\2\u00f8\u00f7\3\2\2\2\u00f9")
        buf.write("\u00fc\3\2\2\2\u00fa\u00f8\3\2\2\2\u00fa\u00fb\3\2\2\2")
        buf.write("\u00fbZ\3\2\2\2\u00fc\u00fa\3\2\2\2\u00fd\u0101\7)\2\2")
        buf.write("\u00fe\u0102\n\3\2\2\u00ff\u0100\7^\2\2\u0100\u0102\t")
        buf.write("\4\2\2\u0101\u00fe\3\2\2\2\u0101\u00ff\3\2\2\2\u0102\u0103")
        buf.write("\3\2\2\2\u0103\u0104\7)\2\2\u0104\\\3\2\2\2\u0105\u0107")
        buf.write("\t\5\2\2\u0106\u0105\3\2\2\2\u0107\u0108\3\2\2\2\u0108")
        buf.write("\u0106\3\2\2\2\u0108\u0109\3\2\2\2\u0109\u010a\3\2\2\2")
        buf.write("\u010a\u010b\b/\2\2\u010b^\3\2\2\2\u010c\u010d\7\61\2")
        buf.write("\2\u010d\u010e\7\61\2\2\u010e\u0112\3\2\2\2\u010f\u0111")
        buf.write("\n\6\2\2\u0110\u010f\3\2\2\2\u0111\u0114\3\2\2\2\u0112")
        buf.write("\u0110\3\2\2\2\u0112\u0113\3\2\2\2\u0113\u0115\3\2\2\2")
        buf.write("\u0114\u0112\3\2\2\2\u0115\u0116\b\60\2\2\u0116`\3\2\2")
        buf.write("\2\t\2\u00f1\u00f3\u00fa\u0101\u0108\u0112\3\2\3\2")
        return buf.getvalue()


class DecafLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    T__38 = 39
    T__39 = 40
    ID = 41
    NUM = 42
    CHAR = 43
    WS = 44
    COMMENTS = 45

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'class'", "'Program'", "'{'", "'}'", "';'", "'['", "']'", "'struct'", 
            "'int'", "'char'", "'boolean'", "'void'", "'('", "','", "')'", 
            "'if'", "'else'", "'while'", "'return'", "'='", "'.'", "'*'", 
            "'/'", "'%'", "'+'", "'-'", "'<'", "'>'", "'<='", "'>='", "'!='", 
            "'&&'", "'||'", "'!'", "'=='", "'<<'", "'>>'", "'''", "'true'", 
            "'false'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "NUM", "CHAR", "WS", "COMMENTS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "T__38", "T__39", "LETTER", "DIGIT", "ID", "NUM", "CHAR", 
                  "WS", "COMMENTS" ]

    grammarFileName = "Decaf.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


